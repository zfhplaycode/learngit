Windows命令
mkdir <文件夹名> 在当下目录下创建一个新的文件夹 
E: 进入E盘的根目录
cd <文件夹名>进入当下目录的指定文件夹
pwd 显示当前目录
dir 查看当前目录下的文件
rm <filename.xxx> 删除当下目录指定文件

git 命令
git config --global user.name "xxx" 设置名字
git config --global user.email"xxx" 设置邮箱
git init 在当前工作区初始化一个空库
git add filename1.xxx filename2.xxx 将工作区文件添加到缓存区
git commit -m(message) "description information" 将缓存区文件添加到库中，并清空缓存区
git status 列举工作区和缓存区中文件的状态
git diff 查看工作区中的文件做了哪些修改
git log【git log --graph 进行可视化操作】 查看详细历史记录【输入字母Q退出查看模式】
git reset --hard HEAD^(HEAD~1) 返回上一个版本，其他类推
git diff HEAD -- filename.txt 查看工作区和版本库中最新版本的区别
git rm <filename.xxx> 从版本库中删除指定文件【执行该命令后依然需要提交，
先手动删除文件，然后使用git rm <file> 和 git add <file>效果是一样的】
git checkout -- filename.xx 在当前目录下删除了指定文件，但是版本库中依然存在，则
使用该命令从版本库中恢复指定文件至当下目录
git remote add origin https://github.com/zfhplaycode/learngit 在本地关联远程库
git push -u origin master 由于远程库是空的，第一次推送master分支时，加上了-u参数，git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或拉取时可以简化命令。
git push origin master 把本地的master分支的最新修改推送至github
git clone https://github.com/zfhplaycode/test 从远程仓库克隆文件
git branch dev 创建一个分支
git checkout dev【等价于git switch dev】 切换分支
git branch -b dev【等价于git switch -c dev】 创建并切换分支
git branch 查看当前分支
git merge dev 将dev分支合并至当前分止
git branch -d dev 删除dev分支
git merge --no--ff -m "description information" 【在使用fast forward模式下，删除分支后，会丢失分支信息，而这种强制禁用fast forward的方式，git就会在merge时生成一个新的commit, 这样从分支历史上就可以看到分支信息】
Bug分支
	git stach 保存当前工作环境，同时把工作区清空
	git stash list 查看已保存的工作现场
	git stash apply 恢复工作现场，但不会删除stash中的内容
	git stash drop 删除stash中的内容
	git stash pop 恢复工作现场并删除stash中的内容
	git stash apply stash@{0} 恢复指定的stash中的内容
	git cherry-pick id-number  复制一个特定的提交到当前分支
Feature分支
[添加一个新功能，新建一个feature分支，在上面开发，完成之后合并最后删除feature分支]
多人协作
流程：
	1、试图用git push origin <branch-name>推送自己的修改
	2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并
	3、如果合并有冲突则解决冲突，并在本地提交
	4、没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功。
如果git pull提示no tracking information, 则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>.
git remote -v 查看远程库信息
标签管理
发布一个版本时，我们首先通常在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。
	git tag [version-name] 默认标签打在最新提交的commit上
	git tag [version-name] [commit-id] 对指定提交打标签
	git tag 查看标签
	git show <tagname> 查看指定标签信息和说明信息
	git tag -a <version-name> -m <description> <commit-id> 创建带有说明的标签
标签总是和某个commit挂钩，如果这个commit即出现在master分支，又出现在dev分支，那么这两个分支都可以看到这个标签信息。
	git tag -d <tagname> 删除指定标签【创建的标签都只存储在本地不会自动推送到远程】
	git push origin <tagname> 推送某个标签到远程
	git push origin --tags 一次性推送全部尚未推送到远程的本地标签
	git push origin :refs/tags/<tagname>删除一个远程标签
配置别名
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit" 在该配置命令后输入git lg可以得到非常详细且明了的提交记录
	cat .git/config 查看每个仓库的配置文件，别名就在[alias]后面，要删除别名，直接把对应的行删掉即可
	cat .gitconfig 当前用户的git配置文件