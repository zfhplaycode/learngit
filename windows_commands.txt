Windows命令
mkdir <文件夹名> 在当下目录下创建一个新的文件夹 
E: 进入E盘的根目录
cd <文件夹名>进入当下目录的指定文件夹
pwd 显示当前目录
dir 查看当前目录下的文件
rm <filename.xxx> 删除当下目录指定文件

git 命令
git config --global user.name "xxx" 设置名字
git config --global user.email"xxx" 设置邮箱
git init 在当前工作区初始化一个空库
git add filename1.xxx filename2.xxx 将工作区文件添加到缓存区
git commit -m(message) "description information" 将缓存区文件添加到库中，并清空缓存区
git status 列举工作区和缓存区中文件的状态
git diff 查看工作区中的文件做了哪些修改
git log【git log --graph 进行可视化操作】 查看详细历史记录【输入字母Q退出查看模式】
git reset --hard HEAD^(HEAD~1) 返回上一个版本，其他类推
git diff HEAD -- filename.txt 查看工作区和版本库中最新版本的区别
git rm <filename.xxx> 从版本库中删除指定文件【执行该命令后依然需要提交，
先手动删除文件，然后使用git rm <file> 和 git add <file>效果是一样的】
git checkout -- filename.xx 在当前目录下删除了指定文件，但是版本库中依然存在，则
使用该命令从版本库中恢复指定文件至当下目录
git remote add origin https://github.com/zfhplaycode/learngit 在本地关联远程库
git push -u origin master 由于远程库是空的，第一次推送master分支时，加上了-u参数，git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或拉取时可以简化命令。
git push origin master 把本地的master分支的最新修改推送至github
git clone https://github.com/zfhplaycode/test 从远程仓库克隆文件
git branch dev 创建一个分支
git checkout dev【等价于git switch dev】 切换分支
git branch -b dev【等价于git switch -c dev】 创建并切换分支
git branch 查看当前分支
git merge dev 将dev分支合并至当前分止
git branch -d dev 删除dev分支
git merge --no--ff -m "description information" 【在使用fast forward模式下，删除分支后，会丢失分支信息，而这种强制禁用fast forward的方式，git就会在merge时生成一个新的commit, 这样从分支历史上就可以看到分支信息】